[데이터베이스 시스템]-----------------------
1. 데이터 베이스(저장소)
2. DBMS(데이터 베이스 관리하는 소프트 웨어)
------------------------------------------

[데이터 베이스 사용자]
1. 일반 사용자
   -1. 초급 사용자 -> 전문 지식 없이 데이터 베이스를 접근하는 사용자 유형 (= 최종 사용자)
   -2. 중급 사용자 -> 전문 지식이 거의 없는 사용자, 데이터 베이스나 DBMS를 알지 못함, 개발자가 개발한 프로그램으로 데이터 단순 반복 처리 

2. 응용 프로그래머
   -데이터 베이스 전문 지식을 가지고 응용 프로그램을 개발할 목적으로 데이터 베이스를 접근하는 사용자 유형 (= 프로그램 전문 개발자)
    
3. 데이터 베이스 관리자
   - 데이터 베이스 구축, 데이터 베이스 시스템을 자체적으로 운영, 통제하는 특별한 소수의 사용자 유형 (= DBMS 슈퍼 사용자)
   - 데이터베이스 시스템 관리 총괄
   - 설계, 구축, 서비스, 운영 활용 -> 데이터 베이스 시스템 제어
   - DB에 대한 모든 권한과 최정 책임을 가짐
   - DB 전체 주고 설계, 보안, 백업, 회복, 성능 감시, 표준화 및민원조정 등 DB 운영, 관리를 위한 핵심 역할 수행
   - 폭넓은 지식과 기술, 경험 필수!

[데이터 언어]
-> DBMS에 요청 내용을 전달하기 위한 도구 (= general 표준 데이터베이스 언어 SQL

[데이터 정의어]
-> 새로운 DB 구조를 정의하거나 기존 DB 구조를 변경하는 명령어 집합
-> 스키마를 명세하기 위해 사용
-> 제약 조건과 스키마 사이의 사상 정보 포함

[데이터 조작어]
-> DB안의 데이터를 실제 조작하는 명령어 집합
   1. 데이터 입력, 수정, 삭제, 검색 요청
   2. 가장 많이 사용되는 인터페이스 도구 (= DML)

[데이터 제어어]
-> DB를 제어하고 통제하기 위해 사용하는 명령어 집합
-> 오류 없이 동작, 성능 유지 위해 각종 제약이나 옵션을 설정함
-> 동시성 제어, 장애 발생 시 적절한 조치를 위한 회복, 데이터의 정확성 유지를 위한 무결성, 데이터 보안과 사용자 계정 관리 등을 지시하기 위한 명령어 들로 구성

[데이터 베이스 관리 시스템]
-> DB를 효율적으로 관리하고 DB에 대한 데이터 요청을 처리하는 소프트웨어 시스템
-> 사용자 <- 중재자 역할 -> DB
-> 다양한 사용자, 응용 프로그램이 DB를 함께 사용할 수 있도록 지원

[DBMS의 구성요소]
1. 정의 기능 -> 필요한 모든 데이터를 저장하는 통합 데이터 베이스 구조를 생성하거나 이미 생성된 구조를 삭제 또는 변경할 수 있도록
2. 조작 기능 -> 저장된 데이터에 접근하여 원하는 데이터 조작을 할 수 있도록한다. (입력, 수정, 삭제, 및 검색 요청을 효율적으로 처리)
3. 제아 기능 -> 여러 사용자가 동시에 다양한 목적으로 접근하더라고 항상 데이터를 정확하고 안전하게 유지하도록 통제, 사용자별 보안 권한 설정, 높은 동시성, 무결성 유지,
              백업을 통해 장애 발생시 필요한 회복 조치가 가능 하도록 제어

[데이터 베이스 서버]
-> DB가 구동되는 서버의 역할을 하는 컴퓨터

[데이터 모델]
-> DB 종류에 따라서 다양한 저장 구조를 갖게 되는데 이러한 DB구조를 명세하기 위한 개념 틀

1. 계층형 데이터 모델
-> 데이터 사이의 연관 관계를 물리적 위치 정보인 포인터로 표현하는 저장방식, 연관된 데이터 사이를 포인터 링크로 연결한 트리형태의 구조

2. 네트워크 형 데이터 모델
-> 데이터 사이의 연관 관계를 포인터로 표현하는 저장 방식, 연관된 데이터 사이를 포인터 링크로 연결할 때 사이클을 형성할 수 있는 망 형태의 구조

3. 관계형 데이터 모델
-> 테이블 형태의 저장 구조를 가지며 데이터 사이의 연관 관계를 '키'라고 하는 테이블의 열값을 통해 표현하는 저장 방식

4. 객체 지향형 데이터 모델
-> 객체 단위의 저장 구조를 가지며 연관된 데이터 사이의 관계를 객체 식별자로 표현하는 저장방식, 실세계와 유사하게 모형화하는 데이터 모델

5. 객체 관계형 데이터 모델
-> 관계형 데이터 모델을 기본 개념으로 하고 객체 데이터 모델의 객체 특성을 일부 반영한 절충형 모델

[데이터 모델과 DBMS의 관계]
1, 1세대(60 ~ 70)
-> 대형 컴퓨터 제조 회사들이 자체 개발한 제품
   계층형 HDBMS, 네트워크형 NDBMS -> 둘 다 응용 프로그램 수정이나 구조 변경이 어려운 문제점, HDBMS 구조가 더 간단하고 속도면에서 효율적

2. 2세대(80초 ~ 현재)
-> 테이블 형태로 구성하는 제품, 관계형 DB에 대한 학문적 연구 + RDBMS 시장의 상용화가 서로 영향을 주며 급속히 발전, 모델이 이해하기 쉽고 구조가 단순해서 현재까지 가장 많이 사용 중인 DBMS

3. 3세대(80후 ~ 현재)
-> 전문 분야에 특화된 DB 발전 과정에서 개발된 제품
객체 지향형 OODBMS -> 객체 지향 언어 상속 개념 이용, 객체 단위로 데이터 구조화하는 제품
90년대 후반 등장한 ORDBMS -> OODBMS + RDBMS 결합 제품, 시장성 높은 기존 RDBMS 기능들을 객체 개념의 장점을 이용하여 확장

4. 4세대(10 중 ~ 현재)
-> 빅데이터와 비정형 데이터의 저장 및 관리 기술이 새로운 핵심 주제로 등장함에 따라 개발된 제품들,
-> 유연한 구조, 확장성, 고성능에 특화된 DBMS들 (= 스키마-리스)

[스키마]
-> 접근하는 수준과 목적에 따라 그 표현 구조가 다양
-> 저장되는 데이터 구조와 제약 조건 등을 정의한 것
-> 정적인 구성 + 동적인 유지 또한 포함

[3단계 데이터 베이스의 구조]
-> 하나의 DB를 외부와 개념 그리고 내부 수준으로 나누어 스키마를 명세하는 것
-> 미국 표준 ANSI애서 제시한 방법, 1. 외부 스키마 2. 개념 스키마 3. 내부 스키마 3개로 분리

1. 외부 스키마
-> 사용자가 외부에서 바라보는 관점에서의 개인적 DB 구조를 정의한 것
-> 일부만을 대상으로 한정하여 명세한 구조 (= 서브 스키마)

2. 개념 스키마
-> 모든 사용자들의 관점을 통합하여 전체 조직 관점에서 DB 구조를 정의한 것
-> 조직이나 기관의 DB 전체를 명세한 구조 (= 스키마)

3. 내부 스키마
-> 저장 장치의 관점에서 전체 DB의 내부 구조를 정의한 것

[데이터 사전]
-> DB에 저장된 모든 부가 정보, DB 정의나 명세 뿐만 아니라 스키마와 이들 간의 사상 정보, 제약 조건 등을 저장하는 저장소
-> DB객체(테이블, 열, 뷰, 인덱스, 사용자 등)에 관한 모든 데이터를 포함, DBMS가 스스로 생성하고 유지
(= 시스템 DB or 시스템 카탈로그)

[메타 데이터]
-> 데이터에 관한 데이터로써 DB 자체에 관한 데이터, 한 차원 높은 데이터 (= 메타 데이터)
****변경은 DBMS만 가능

[데이터 디렉토리]
-> 데이터 접근에 필요한 위치 정보를 저장하는 저장소
-> 사용자나 응용 프로그램이 실제로 이용하는 데이터를 저장하는 일반 DB (= 사용자 DB)

[데이터 독립성]
-> 데이터의 논리적 구조나 물리적 구조가 변경되더라도 응용 프로그램이 영향을 받지 않음

1. 외부 개념 사상: 논리적 데이터 독립성 제공
-> 외부 스키마를 변경하더라도 전체 개념적 스키마는 변경되지 않거나 변경 되더라도 변경내용 최소화, 타 응용 프로그램에 주는 영향 최소화

2. 논리적 데이터 독립성
-> 응용 프로그램에 영향을 최소화하면서 DB의 논리적 구조를 변경할 수 있는 것 

3. 물리적 데이터 독립성
-> 개념적 스키마에 영향을 최소화 하면서 DB의 물리적 구조를 변경할 수 있는 것
- 기존 응용 프로그램들에게 영향을 주지 않으면서 물리적 구조 변경 가능
   
